@import "tailwindcss";
@import "tw-animate-css";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-code-block-background: var(--code-block-background);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --font-size-base: 1rem;
  --markdown-font-size: 1rem;
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --border-light: oklch(0.985 0 0);
  --border-dark: oklch(0.705 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
  --code-block-background: #0d1117;
  /* Testing */
  --spacing: 0.25rem;
  --thread-content-max-width: 32rem;
  --tw-border-style: solid;
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --border-light: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}

.overflow-y-auto {
  overflow-y: overlay;
}

.overflow-x-auto {
  overflow-x: overlay;
}

blockquote,
dd,
dl,
fieldset,
figure,
h1,
h2,
h3,
h4,
h5,
h6,
hr,
p,
pre {
  margin: 0;
}

/* Custom Code Block */
code,
pre {
  font-family: Consolas, SÃ¶hne Mono, Monaco, Andale Mono, Ubuntu Mono, monospace !important;
  width: 100%;
}
code[class="language-plaintext"] {
  white-space: pre-line;
}
code.hljs,
code[class*="language-"],
pre[class*="language-"] {
  word-wrap: normal;
  color: #fff;
  -webkit-hyphens: none;
  hyphens: none;
  tab-size: 4;
  text-align: left;
  white-space: pre;
  word-break: normal;
  word-spacing: normal;
  scrollbar-color: #666 #201c29;
  background: none;
  white-space: pre;
  -webkit-overflow-scrolling: touch;
  overflow-x: scroll;
  display: block;
  max-width: 100%;
  min-width: 100px;
  font-size: 14px;
  padding: 15px 20px 12px 22px;
  line-height: 1.75;
}
pre[class*="language-"] {
  border-radius: 0.3em;
  overflow: auto;
}
:not(pre) > code.hljs,
:not(pre) > code[class*="language-"] {
  border-radius: 0.3em;
  padding: 2em;
  white-space: normal;
}
.hljs-comment {
  color: hsla(0, 0%, 100%, 0.5);
}
.hljs-meta {
  color: hsla(0, 0%, 100%, 0.6);
}
.hljs-built_in,
.hljs-class .hljs-title {
  color: #e9950c;
}
.hljs-doctag,
.hljs-formula,
.hljs-keyword,
.hljs-literal {
  color: #2e95d3;
}
.hljs-addition,
.hljs-attribute,
.hljs-meta-string,
.hljs-regexp,
.hljs-string {
  color: #00a67d;
}
.hljs-attr,
.hljs-number,
.hljs-selector-attr,
.hljs-selector-class,
.hljs-selector-pseudo,
.hljs-template-variable,
.hljs-type,
.hljs-variable {
  color: #df3079;
}
.hljs-bullet,
.hljs-link,
.hljs-selector-id,
.hljs-symbol,
.hljs-title {
  color: #f22c3d;
}

.katex-display {
  margin: 0;
  padding: 1rem 0;
  display: block;
  text-align: center;
  overflow-x: auto;
  overflow-y: hidden;
  max-width: 100%;
  width: 100%;
}

html,
body,
#root {
  height: 100%;
}

/* Markdown */
.markdown {
  max-width: none;
  font-size: var(--markdown-font-size, var(--font-size-base));
  line-height: calc(
    28px * var(--markdown-font-size, var(--font-size-base)) /
      var(--font-size-base)
  );
}

/* Markdown */
.markdown blockquote {
  --tw-border-opacity: 1;
  border-color: rgba(142, 142, 160, var(--tw-border-opacity));
  border-left-width: 2px;
  line-height: 1rem;
  padding-left: 1rem;
}

.markdown table {
  --tw-border-spacing-x: 0px;
  --tw-border-spacing-y: 0px;
  border-collapse: collapse;
  border-spacing: var(--tw-border-spacing-x) var(--tw-border-spacing-y);
  width: 100%;
}

.markdown tr th {
  border-bottom: 2px solid #e1e1e1;
}

.markdown th,
.markdown td {
  border-bottom: 1.5px solid #e1e1e1;
  padding: 0.25rem 0.75rem;
  text-align: left;
}

.markdown tbody tr:last-child td {
  border-bottom: none;
}

.markdown a {
  text-decoration-line: underline;
  text-underline-offset: 2px;
}

.markdown p {
  margin-bottom: 0.5rem;
}

.markdown p:not(:first-child) {
  margin-top: 0.5rem;
}

/* Base styles for lists */
.prose ol,
.prose ul,
.markdown ol,
.markdown ul {
  list-style-position: outside;
  margin-top: 1em;
  margin-bottom: 1em;
  padding-left: 2em;
}

.prose li,
.markdown li {
  text-align: -webkit-match-parent;
  margin-bottom: 0.5em;
  margin-top: 0.5em;
}

/* Ordered lists */
.prose ol,
.markdown ol {
  list-style-type: decimal;
}

.prose ol > li,
.markdown ol > li {
  position: relative;
  padding-left: 0.375em;
}

.prose ol > li::marker,
.markdown ol > li::marker {
  color: var(--tw-prose-counters);
  font-weight: bold;
}

/* Nested ordered lists */
.prose ol ol,
.markdown ol ol {
  list-style-type: lower-alpha;
}

.prose ol ol ol,
.markdown ol ol ol {
  list-style-type: lower-roman;
}

/* Unordered lists */
.prose ul,
.markdown ul {
  list-style-type: disc;
}

.prose ul > li,
.markdown ul > li {
  padding-left: 0.375em;
}

.prose ul > li::marker,
.markdown ul > li::marker {
  color: var(--tw-prose-bullets);
}

/* Nested unordered lists */
.prose ul ul,
.markdown ul ul {
  list-style-type: circle;
}

.prose ul ul ul,
.markdown ul ul ul {
  list-style-type: square;
}

/* Nested lists */
.prose ol ol,
.prose ul ul,
.prose ul ol,
.prose ol ul,
.markdown ol ol,
.markdown ul ul,
.markdown ul ol,
.markdown ol ul {
  margin-top: 0.75em;
  margin-bottom: 0.75em;
}

.prose > ul > li > *:last-child,
.prose > ol > li > *:last-child,
.markdown > ul > li > *:last-child,
.markdown > ol > li > *:last-child {
  margin-bottom: 1.25em;
}

/* Ensure proper marker color */
.prose li::marker,
.markdown li::marker {
  color: currentColor;
}

/* Tailwind CSS Prose */
.prose {
  color: var(--tw-prose-body);
  max-width: 99%;
  font-size: var(--markdown-font-size, var(--font-size-base));
  line-height: calc(
    28px * var(--markdown-font-size, var(--font-size-base)) /
      var(--font-size-base)
  );
}

.prose :where([class~="lead"]):not(:where([class~="not-prose"] *)) {
  color: var(--tw-prose-lead);
  font-size: 1.25em;
  line-height: 1.6;
  margin-bottom: 1.2em;
  margin-top: 1.2em;
}
.prose :where(a):not(:where([class~="not-prose"] *)) {
  color: var(--tw-prose-links);
  font-weight: 500;
  text-decoration: underline;
}
.prose :where(strong):not(:where([class~="not-prose"] *)) {
  color: var(--tw-prose-bold);
  font-weight: 600;
}
.prose :where(a strong):not(:where([class~="not-prose"] *)) {
  color: inherit;
}
.prose :where(blockquote strong):not(:where([class~="not-prose"] *)) {
  color: inherit;
}
.prose :where(thead th strong):not(:where([class~="not-prose"] *)) {
  color: inherit;
}
.prose :where(ul > li):not(:where([class~="not-prose"] *))::marker {
  color: var(--tw-prose-bullets);
}
.prose :where(hr):not(:where([class~="not-prose"] *)) {
  border-color: var(--tw-prose-hr);
  border-top-width: 1px;
  width: 100%;
  margin-bottom: 2em;
  margin-top: 2em;
}
.prose :where(blockquote):not(:where([class~="not-prose"] *)) {
  border-left-color: var(--tw-prose-quote-borders);
  border-left-width: 0.25rem;
  color: var(--tw-prose-quotes);
  font-style: italic;
  font-style: normal;
  font-weight: 500;
  margin-bottom: 1.6em;
  margin-top: 1.6em;
  padding-left: 1em;
  quotes: "\201C""\201D""\2018""\2019";
}
.prose
  :where(blockquote p:first-of-type):not(
    :where([class~="not-prose"] *)
  ):before {
  content: open-quote;
}
.prose
  :where(blockquote p:last-of-type):not(:where([class~="not-prose"] *)):after {
  content: close-quote;
}
.prose :where(h1):not(:where([class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-size: 2.25em;
  font-weight: 800;
  line-height: 1.1111111;
  margin-bottom: 0.8888889em;
  margin-top: 0;
}
.prose :where(h1 strong):not(:where([class~="not-prose"] *)) {
  color: inherit;
  font-weight: 900;
}
.prose :where(h2):not(:where([class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-size: 1.5em;
  font-weight: 700;
  line-height: 1.3333333;
  margin-bottom: 1em;
  margin-top: 2em;
}
.prose :where(h2 strong):not(:where([class~="not-prose"] *)) {
  color: inherit;
  font-weight: 800;
}
.prose :where(h3):not(:where([class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-size: 1.25em;
  font-weight: 600;
  line-height: 1.6;
  margin-bottom: 0.6em;
  margin-top: 1.6em;
}
.prose :where(h3 strong):not(:where([class~="not-prose"] *)) {
  color: inherit;
  font-weight: 700;
}
.prose :where(h4):not(:where([class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 600;
  line-height: 1.5;
  margin-bottom: 0.5em;
  margin-top: 0em;
}
.prose :where(h4 strong):not(:where([class~="not-prose"] *)) {
  color: inherit;
  font-weight: 700;
}
.prose :where(img):not(:where([class~="not-prose"] *)) {
  margin-bottom: 2em;
  margin-top: 2em;
}
.prose :where(figure > *):not(:where([class~="not-prose"] *)) {
  margin-bottom: 0;
  margin-top: 0;
}
.prose :where(figcaption):not(:where([class~="not-prose"] *)) {
  color: var(--tw-prose-captions);
  font-size: 0.875em;
  line-height: 1.4285714;
  margin-top: 0.8571429em;
}
.prose :where(code):not(:where([class~="not-prose"] *)) {
  color: var(--tw-prose-code);
  font-size: 0.875em;
  font-weight: 600;
}
.prose :where(code):not(:where([class~="not-prose"] *)):before {
  content: "`";
}
.prose :where(code):not(:where([class~="not-prose"] *)):after {
  content: "`";
}
.prose :where(a code):not(:where([class~="not-prose"] *)) {
  color: inherit;
}
.prose :where(h1 code):not(:where([class~="not-prose"] *)) {
  color: inherit;
}
.prose :where(h2 code):not(:where([class~="not-prose"] *)) {
  color: inherit;
  font-size: 0.875em;
}
.prose :where(h3 code):not(:where([class~="not-prose"] *)) {
  color: inherit;
  font-size: 0.9em;
}
.prose :where(h4 code):not(:where([class~="not-prose"] *)) {
  color: inherit;
}
.prose :where(blockquote code):not(:where([class~="not-prose"] *)) {
  color: inherit;
}
.prose :where(thead th code):not(:where([class~="not-prose"] *)) {
  color: inherit;
}
.prose :where(pre):not(:where([class~="not-prose"] *)) {
  background-color: transparent;
  border-radius: 0.375rem;
  color: currentColor;
  font-size: 0.875em;
  font-weight: 400;
  line-height: 1.7142857;
  margin: 0;
  overflow-x: auto;
  padding: 0;
}
.prose :where(pre code):not(:where([class~="not-prose"] *)) {
  background-color: transparent;
  border-radius: 0;
  border-width: 0;
  color: inherit;
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
  line-height: inherit;
  padding: 0;
}
.prose :where(pre code):not(:where([class~="not-prose"] *)):before {
  content: none;
}
.prose :where(pre code):not(:where([class~="not-prose"] *)):after {
  content: none;
}
.prose :where(table):not(:where([class~="not-prose"] *)) {
  font-size: 0.875em;
  line-height: 1.7142857;
  margin-bottom: 2em;
  margin-top: 2em;
  table-layout: auto;
  text-align: left;
  width: 100%;
}
.prose :where(thead):not(:where([class~="not-prose"] *)) {
  border-bottom-color: var(--tw-prose-th-borders);
  border-bottom-width: 1px;
}
.prose :where(thead th):not(:where([class~="not-prose"] *)) {
  color: var(--tw-prose-headings);
  font-weight: 600;
  padding-bottom: 0.5714286em;
  padding-left: 0.5714286em;
  padding-right: 0.5714286em;
  vertical-align: bottom;
}
.prose :where(tbody tr):not(:where([class~="not-prose"] *)) {
  border-bottom-color: var(--tw-prose-td-borders);
  border-bottom-width: 1px;
}
.prose :where(tbody tr:last-child):not(:where([class~="not-prose"] *)) {
  border-bottom-width: 0;
}
.prose :where(tbody td):not(:where([class~="not-prose"] *)) {
  vertical-align: baseline;
}
.prose :where(tfoot):not(:where([class~="not-prose"] *)) {
  border-top-color: var(--tw-prose-th-borders);
  border-top-width: 1px;
}
.prose :where(tfoot td):not(:where([class~="not-prose"] *)) {
  vertical-align: top;
}
.prose {
  --tw-prose-body: #1f2020;
  --tw-prose-headings: #111827;
  --tw-prose-lead: #4b5563;
  --tw-prose-links: #0066cc;
  --tw-prose-bold: #111827;
  --tw-prose-counters: #515356;
  --tw-prose-bullets: #515356;
  --tw-prose-hr: #e5e7eb;
  --tw-prose-quotes: #111827;
  --tw-prose-quote-borders: #e5e7eb;
  --tw-prose-captions: #6b7280;
  --tw-prose-code: #111827;
  --tw-prose-pre-code: #e5e7eb;
  --tw-prose-pre-bg: #1f2937;
  --tw-prose-th-borders: #d1d5db;
  --tw-prose-td-borders: #e5e7eb;
  --tw-prose-invert-body: #d1d5db;
  --tw-prose-invert-headings: #fff;
  --tw-prose-invert-lead: #9ca3af;
  --tw-prose-invert-links: #fff;
  --tw-prose-invert-bold: #fff;
  --tw-prose-invert-counters: #9ca3af;
  --tw-prose-invert-bullets: #4b5563;
  --tw-prose-invert-hr: #374151;
  --tw-prose-invert-quotes: #f3f4f6;
  --tw-prose-invert-quote-borders: #374151;
  --tw-prose-invert-captions: #9ca3af;
  --tw-prose-invert-code: #fff;
  --tw-prose-invert-pre-code: #d1d5db;
  --tw-prose-invert-pre-bg: rgba(0, 0, 0, 0.5);
  --tw-prose-invert-th-borders: #4b5563;
  --tw-prose-invert-td-borders: #374151;
  font-size: 1rem;
  line-height: 1.75;
}
.prose :where(p):not(:where([class~="not-prose"] *)) {
  margin-bottom: 1.25em;
  margin-top: 1.25em;
}
.prose :where(video):not(:where([class~="not-prose"] *)) {
  margin-bottom: 2em;
  margin-top: 2em;
}
.prose :where(figure):not(:where([class~="not-prose"] *)) {
  margin-bottom: 2em;
  margin-top: 2em;
}
.prose :where(li):not(:where([class~="not-prose"] *)) {
  margin-bottom: 0.5em;
  margin-top: 0.5em;
}
.prose :where(ul > li):not(:where([class~="not-prose"] *)) {
  padding-left: 0.375em;
}
.prose :where(.prose > ul > li p):not(:where([class~="not-prose"] *)) {
  margin-bottom: 0.75em;
  margin-top: 0.75em;
}
.prose
  :where(.prose > ul > li > :first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 0;
}
.prose
  :where(.prose > ul > li > :last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 1.25em !important;
}
.prose :where(hr + *):not(:where([class~="not-prose"] *)) {
  margin-top: 0 !important;
}
.prose :where(h2 + *):not(:where([class~="not-prose"] *)) {
  margin-top: 0 !important;
}
.prose :where(h3 + *):not(:where([class~="not-prose"] *)) {
  margin-top: 0 !important;
}
.prose :where(h4 + *):not(:where([class~="not-prose"] *)) {
  margin-top: 0 !important;
}
.prose :where(thead th:first-child):not(:where([class~="not-prose"] *)) {
  padding-left: 0 !important;
}
.prose :where(thead th:last-child):not(:where([class~="not-prose"] *)) {
  padding-right: 0 !important;
}
.prose :where(tbody td, tfoot td):not(:where([class~="not-prose"] *)) {
  padding: 0.5714286em !important;
}
.prose
  :where(tbody td:first-child, tfoot td:first-child):not(
    :where([class~="not-prose"] *)
  ) {
  padding-left: 0 !important;
}
.prose
  :where(tbody td:last-child, tfoot td:last-child):not(
    :where([class~="not-prose"] *)
  ) {
  padding-right: 0 !important;
}
.prose :where(.prose > :first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 0 !important;
}
.prose :where(.prose > :last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 0 !important;
}
.prose-sm :where(.prose > ul > li p):not(:where([class~="not-prose"] *)) {
  margin-bottom: 0.5714286em !important;
  margin-top: 0.5714286em !important;
}
.prose-sm
  :where(.prose > ul > li > :first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 1.1428571em !important;
}
.prose-sm
  :where(.prose > ul > li > :last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 1.1428571em !important;
}
.prose-sm :where(.prose > :first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 0 !important;
}
.prose-sm :where(.prose > :last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 0 !important;
}
.prose-base :where(.prose > ul > li p):not(:where([class~="not-prose"] *)) {
  margin-bottom: 0.75em !important;
  margin-top: 0.75em !important;
}
.prose-base
  :where(.prose > ul > li > :first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 0 !important;
}
.prose-base
  :where(.prose > ul > li > :last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 1.25em !important;
}
.prose-base :where(.prose > :first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 0 !important;
}
.prose-base :where(.prose > :last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 0 !important;
}
.prose-lg :where(.prose > ul > li p):not(:where([class~="not-prose"] *)) {
  margin-bottom: 0.8888889em !important;
  margin-top: 0.8888889em !important;
}
.prose-lg
  :where(.prose > ul > li > :first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 1.3333333em !important;
}
.prose-lg
  :where(.prose > ul > li > :last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 1.3333333em !important;
}
.prose-lg :where(.prose > :first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 0 !important;
}
.prose-lg :where(.prose > :last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 0 !important;
}
.prose-xl :where(.prose > ul > li p):not(:where([class~="not-prose"] *)) {
  margin-bottom: 0.8em !important;
  margin-top: 0.8em !important;
}
.prose-xl
  :where(.prose > ul > li > :first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 1.2em !important;
}
.prose-xl
  :where(.prose > ul > li > :last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 1.2em !important;
}
.prose-xl :where(.prose > :first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 0 !important;
}
.prose-xl :where(.prose > :last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 0 !important;
}
.prose-2xl :where(.prose > ul > li p):not(:where([class~="not-prose"] *)) {
  margin-bottom: 0.8333333em !important;
  margin-top: 0.8333333em !important;
}
.prose-2xl
  :where(.prose > ul > li > :first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 1.3333333em !important;
}
.prose-2xl
  :where(.prose > ul > li > :last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 1.3333333em !important;
}
.prose-2xl :where(.prose > :first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 0 !important;
}
.prose-2xl :where(.prose > :last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 0 !important;
}

/* Ordered Listing */
.prose :where(ol[type="A"]):not(:where([class~="not-prose"] *)) {
  list-style-type: upper-alpha;
}
.prose :where(ol[type="a"]):not(:where([class~="not-prose"] *)) {
  list-style-type: lower-alpha;
}
.prose :where(ol[type="A s"]):not(:where([class~="not-prose"] *)) {
  list-style-type: upper-alpha;
}
.prose :where(ol[type="a s"]):not(:where([class~="not-prose"] *)) {
  list-style-type: lower-alpha;
}
.prose :where(ol[type="I"]):not(:where([class~="not-prose"] *)) {
  list-style-type: upper-roman;
}
.prose :where(ol[type="i"]):not(:where([class~="not-prose"] *)) {
  list-style-type: lower-roman;
}
.prose :where(ol[type="I s"]):not(:where([class~="not-prose"] *)) {
  list-style-type: upper-roman;
}
.prose :where(ol[type="i s"]):not(:where([class~="not-prose"] *)) {
  list-style-type: lower-roman;
}
.prose :where(ol[type="1"]):not(:where([class~="not-prose"] *)) {
  list-style-type: decimal;
}
.prose
  :where(.prose > ol > li > :first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 0;
}
.prose
  :where(.prose > ol > li > :last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 0.5em;
}
.prose :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~="not-prose"] *)) {
  margin-bottom: 0.75em;
  margin-top: 0.75em;
}
.prose-sm
  :where(.prose > ol > li > :first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 1.1428571em;
}
.prose-sm
  :where(.prose > ol > li > :last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 1.1428571em;
}
.prose-base
  :where(.prose > ol > li > :first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 0;
}
.prose-base
  :where(.prose > ol > li > :last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 1.25em;
}
.prose-lg
  :where(.prose > ol > li > :first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 1.3333333em;
}
.prose-lg
  :where(.prose > ol > li > :last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 1.3333333em;
}
.prose-xl
  :where(.prose > ol > li > :first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 1.2em;
}
.prose-xl
  :where(.prose > ol > li > :last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 1.2em;
}
.prose-2xl
  :where(.prose > ol > li > :first-child):not(:where([class~="not-prose"] *)) {
  margin-top: 1.3333333em;
}
.prose-2xl
  :where(.prose > ol > li > :last-child):not(:where([class~="not-prose"] *)) {
  margin-bottom: 1.3333333em;
}

/* Scroll to bottom button */
.scroll-animation-enter {
  opacity: 0;
  transform: translateY(20px) scale(0.7) rotate(-5deg);
  pointer-events: none;
}

.scroll-animation-enter-done {
  opacity: 1;
  transform: translateY(0) scale(1);
}

.scroll-animation-exit-done {
  display: none;
}

@keyframes twist-entrance {
  0% {
    transform: translateY(20px) scale(0.7) rotate(-5deg);
    opacity: 0;
  }
  60% {
    transform: translateY(2px) scale(0.95) rotate(2deg);
    opacity: 0.9;
  }
  100% {
    transform: translateY(0) scale(1) rotate(0deg);
    opacity: 1;
  }
}

.scroll-animation-enter-active {
  animation: twist-entrance 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
  transition-delay: 50ms;
}

@keyframes twist-exit {
  0% {
    transform: translateY(0) scale(1) rotate(0deg);
    opacity: 1;
  }
  40% {
    transform: translateY(5px) scale(0.95) rotate(2deg);
    opacity: 0.7;
  }
  100% {
    transform: translateY(20px) scale(0.7) rotate(-5deg);
    opacity: 0;
  }
}

.scroll-animation-exit-active {
  animation: twist-exit 0.4s cubic-bezier(0.55, 0.085, 0.68, 0.53) forwards;
  pointer-events: none;
}

.premium-scroll-button {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 34px;
  height: 34px;
  padding: 0;
  border-radius: 50%;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05), 0 4px 12px rgba(0, 0, 0, 0.08),
    0 0 0 1px rgba(255, 255, 255, 0.08);
  background-color: rgba(255, 255, 255, 0.9);
  z-index: 10;
  transition: transform 500ms cubic-bezier(0.25, 0.1, 0.25, 1),
    box-shadow 500ms cubic-bezier(0.25, 0.1, 0.25, 1);
  overflow: hidden;
}

.dark .premium-scroll-button {
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2), 0 4px 12px rgba(0, 0, 0, 0.25),
    0 0 0 1px rgba(255, 255, 255, 0.06);
  background-color: rgba(35, 35, 40, 0.9);
}

.scroll-animation-enter-active .premium-scroll-button {
  pointer-events: none !important;
}

.premium-scroll-button:hover:not(:active) {
  transform: translateY(-1.5px) scale(1.02);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.07), 0 7px 14px rgba(0, 0, 0, 0.1),
    0 0 0 1px rgba(255, 255, 255, 0.1);
}

.premium-scroll-button:active {
  transform: translateY(1px) scale(0.98);
  transition: all 150ms cubic-bezier(0.2, 0, 0.2, 1);
  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1), 0 2px 8px rgba(0, 0, 0, 0.08),
    0 0 0 1px rgba(255, 255, 255, 0.08);
}

@keyframes float {
  0%,
  100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-1px);
  }
}

.scroll-animation-enter-done .premium-scroll-button {
  animation: float 2s ease-in-out infinite;
}

.premium-scroll-button:hover,
.premium-scroll-button:active {
  animation: none;
}

.message-content {
  font-size: var(--markdown-font-size, var(--font-size-base));
  line-height: 1.75;
}

.message-content pre code {
  font-size: calc(0.85 * var(--markdown-font-size, var(--font-size-base)));
}

.message-content pre {
  font-size: var(--markdown-font-size, var(--font-size-base));
}

.code-analyze-block pre code,
.code-analyze-block .overflow-y-auto code {
  font-size: calc(0.85 * var(--markdown-font-size, var(--font-size-base)));
}

.code-analyze-block pre,
.code-analyze-block .overflow-y-auto {
  font-size: var(--markdown-font-size, var(--font-size-base));
}

.progress-text-wrapper {
  font-size: var(--markdown-font-size, var(--font-size-base));
  line-height: calc(1.25 * var(--markdown-font-size, var(--font-size-base)));
}

/** Note: ensure KaTeX can spread across visible space */
.message-content pre:has(> span.katex) {
  overflow: visible !important;
  height: auto !important;
  max-height: none !important;
}

/* Test */
